# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    #1. repository checkout
    - uses: actions/checkout@v4
    #2. JDK 환경 설치
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
    # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
    # 3. gradle 환경 설치
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

    #4. gradle 빌드
    - name: Build with Gradle Wrapper
      run: ./gradlew clean build

    #5. Docker 이미지 빌드
    - name : Build Docker Image
      run: docker build -t spring-boot-app .

    #6. Docker 이미지 파일로 저장
    - name : Save Docker Image
      run : docker save spring-boot-app > spring-boot-app.tar

    #5. 빌드된 파일 이름 변경
#    - name : change JAR Name
#      run : mv ./build/libs/*SNAPSHOT.jar ./cicdtest.jar

    # 7. 도커 이미지 EC2로 전송
    - name: 도커 이미지 EC2로 전송 (SCP 이용)
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.SERVER_IP }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        source: spring-boot-app.tar
        target: /home/ubuntu

    #0. 테스트
#    - name : Gradle Test
#      run : ./gradlew clean test

  #배포
  deploy:
    needs : build
    runs-on : ubuntu-latest

    steps:
      - name : EC2 Connect & 도커 컨테이너 배포
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP}}
          username: ${{secrets.SSH_USERNAME}}
          key: ${{secrets.SSH_PRIVATE_KEY}}
          script_stop: true #배포 중 오류가 나면 즉시 중지
          script : |
            docker load < /home/ubuntu/spring-boot-app.tar
#             기존 컨테이너 중지, 삭제
            docker stop spring-boot-app || true
            docker rm spring-boot-app || true
            docker run -d --name spring-boot-app -p 8080:8080 spring-boot-app


  #            sudo fuser -k -n tcp 8080 || true #8080 포트 사용 중지
#            sudo nohup java -jar cicdtest.jar > ./output.log 2>&1 &

  dependency-submission:

    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Generates and submits a dependency graph, enabling Dependabot Alerts for all project dependencies.
    # See: https://github.com/gradle/actions/blob/main/dependency-submission/README.md
    - name: Generate and submit dependency graph
      uses: gradle/actions/dependency-submission@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
